apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: retrieval
  namespace: cortex-k8s
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: retrieval
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: retrieval
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: retrieval
subjects:
- kind: ServiceAccount
  name: retrieval
  namespace: cortex-k8s
---
apiVersion: v1
data:
  prom_rules.yaml: |
    "groups":
    - "name": "cortex_api"
      "rules":
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_request_duration_seconds_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_request_duration_seconds_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_request_duration_seconds_sum[1m])) by (cluster, job) / sum(rate(cortex_request_duration_seconds_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_request_duration_seconds_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_request_duration_seconds_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_request_duration_seconds_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_request_duration_seconds_bucket[1m])) by (le, cluster, job, route))"
        "record": "cluster_job_route:cortex_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_request_duration_seconds_bucket[1m])) by (le, cluster, job, route))"
        "record": "cluster_job_route:cortex_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_request_duration_seconds_sum[1m])) by (cluster, job, route) / sum(rate(cortex_request_duration_seconds_count[1m])) by (cluster, job, route)"
        "record": "cluster_job_route:cortex_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_request_duration_seconds_bucket[1m])) by (le, cluster, job, route)"
        "record": "cluster_job_route:cortex_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_request_duration_seconds_sum[1m])) by (cluster, job, route)"
        "record": "cluster_job_route:cortex_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_request_duration_seconds_count[1m])) by (cluster, job, route)"
        "record": "cluster_job_route:cortex_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_request_duration_seconds_bucket[1m])) by (le, cluster, namespace, job, route))"
        "record": "cluster_namespace_job_route:cortex_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_request_duration_seconds_bucket[1m])) by (le, cluster, namespace, job, route))"
        "record": "cluster_namespace_job_route:cortex_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_request_duration_seconds_sum[1m])) by (cluster, namespace, job, route) / sum(rate(cortex_request_duration_seconds_count[1m])) by (cluster, namespace, job, route)"
        "record": "cluster_namespace_job_route:cortex_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_request_duration_seconds_bucket[1m])) by (le, cluster, namespace, job, route)"
        "record": "cluster_namespace_job_route:cortex_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_request_duration_seconds_sum[1m])) by (cluster, namespace, job, route)"
        "record": "cluster_namespace_job_route:cortex_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_request_duration_seconds_count[1m])) by (cluster, namespace, job, route)"
        "record": "cluster_namespace_job_route:cortex_request_duration_seconds_count:sum_rate"
    - "name": "cortex_querier_api"
      "rules":
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_querier_request_duration_seconds_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_querier_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_querier_request_duration_seconds_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_querier_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_sum[1m])) by (cluster, job) / sum(rate(cortex_querier_request_duration_seconds_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_querier_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_querier_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_querier_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_querier_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_querier_request_duration_seconds_bucket[1m])) by (le, cluster, job, route))"
        "record": "cluster_job_route:cortex_querier_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_querier_request_duration_seconds_bucket[1m])) by (le, cluster, job, route))"
        "record": "cluster_job_route:cortex_querier_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_sum[1m])) by (cluster, job, route) / sum(rate(cortex_querier_request_duration_seconds_count[1m])) by (cluster, job, route)"
        "record": "cluster_job_route:cortex_querier_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_bucket[1m])) by (le, cluster, job, route)"
        "record": "cluster_job_route:cortex_querier_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_sum[1m])) by (cluster, job, route)"
        "record": "cluster_job_route:cortex_querier_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_count[1m])) by (cluster, job, route)"
        "record": "cluster_job_route:cortex_querier_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_querier_request_duration_seconds_bucket[1m])) by (le, cluster, namespace, job, route))"
        "record": "cluster_namespace_job_route:cortex_querier_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_querier_request_duration_seconds_bucket[1m])) by (le, cluster, namespace, job, route))"
        "record": "cluster_namespace_job_route:cortex_querier_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_sum[1m])) by (cluster, namespace, job, route) / sum(rate(cortex_querier_request_duration_seconds_count[1m])) by (cluster, namespace, job, route)"
        "record": "cluster_namespace_job_route:cortex_querier_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_bucket[1m])) by (le, cluster, namespace, job, route)"
        "record": "cluster_namespace_job_route:cortex_querier_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_sum[1m])) by (cluster, namespace, job, route)"
        "record": "cluster_namespace_job_route:cortex_querier_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_querier_request_duration_seconds_count[1m])) by (cluster, namespace, job, route)"
        "record": "cluster_namespace_job_route:cortex_querier_request_duration_seconds_count:sum_rate"
    - "name": "cortex_cache"
      "rules":
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_memcache_request_duration_seconds_bucket[1m])) by (le, cluster, job, method))"
        "record": "cluster_job_method:cortex_memcache_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_memcache_request_duration_seconds_bucket[1m])) by (le, cluster, job, method))"
        "record": "cluster_job_method:cortex_memcache_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_memcache_request_duration_seconds_sum[1m])) by (cluster, job, method) / sum(rate(cortex_memcache_request_duration_seconds_count[1m])) by (cluster, job, method)"
        "record": "cluster_job_method:cortex_memcache_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_memcache_request_duration_seconds_bucket[1m])) by (le, cluster, job, method)"
        "record": "cluster_job_method:cortex_memcache_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_memcache_request_duration_seconds_sum[1m])) by (cluster, job, method)"
        "record": "cluster_job_method:cortex_memcache_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_memcache_request_duration_seconds_count[1m])) by (cluster, job, method)"
        "record": "cluster_job_method:cortex_memcache_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_cache_request_duration_seconds_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_cache_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_cache_request_duration_seconds_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_cache_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_cache_request_duration_seconds_sum[1m])) by (cluster, job) / sum(rate(cortex_cache_request_duration_seconds_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_cache_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_cache_request_duration_seconds_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_cache_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_cache_request_duration_seconds_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_cache_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_cache_request_duration_seconds_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_cache_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_cache_request_duration_seconds_bucket[1m])) by (le, cluster, job, method))"
        "record": "cluster_job_method:cortex_cache_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_cache_request_duration_seconds_bucket[1m])) by (le, cluster, job, method))"
        "record": "cluster_job_method:cortex_cache_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_cache_request_duration_seconds_sum[1m])) by (cluster, job, method) / sum(rate(cortex_cache_request_duration_seconds_count[1m])) by (cluster, job, method)"
        "record": "cluster_job_method:cortex_cache_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_cache_request_duration_seconds_bucket[1m])) by (le, cluster, job, method)"
        "record": "cluster_job_method:cortex_cache_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_cache_request_duration_seconds_sum[1m])) by (cluster, job, method)"
        "record": "cluster_job_method:cortex_cache_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_cache_request_duration_seconds_count[1m])) by (cluster, job, method)"
        "record": "cluster_job_method:cortex_cache_request_duration_seconds_count:sum_rate"
    - "name": "cortex_storage"
      "rules":
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_bigtable_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation))"
        "record": "cluster_job_operation:cortex_bigtable_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_bigtable_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation))"
        "record": "cluster_job_operation:cortex_bigtable_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_bigtable_request_duration_seconds_sum[1m])) by (cluster, job, operation) / sum(rate(cortex_bigtable_request_duration_seconds_count[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_bigtable_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_bigtable_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation)"
        "record": "cluster_job_operation:cortex_bigtable_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_bigtable_request_duration_seconds_sum[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_bigtable_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_bigtable_request_duration_seconds_count[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_bigtable_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_cassandra_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation))"
        "record": "cluster_job_operation:cortex_cassandra_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_cassandra_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation))"
        "record": "cluster_job_operation:cortex_cassandra_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_cassandra_request_duration_seconds_sum[1m])) by (cluster, job, operation) / sum(rate(cortex_cassandra_request_duration_seconds_count[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_cassandra_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_cassandra_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation)"
        "record": "cluster_job_operation:cortex_cassandra_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_cassandra_request_duration_seconds_sum[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_cassandra_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_cassandra_request_duration_seconds_count[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_cassandra_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_dynamo_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation))"
        "record": "cluster_job_operation:cortex_dynamo_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_dynamo_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation))"
        "record": "cluster_job_operation:cortex_dynamo_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_dynamo_request_duration_seconds_sum[1m])) by (cluster, job, operation) / sum(rate(cortex_dynamo_request_duration_seconds_count[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_dynamo_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_dynamo_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation)"
        "record": "cluster_job_operation:cortex_dynamo_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_dynamo_request_duration_seconds_sum[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_dynamo_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_dynamo_request_duration_seconds_count[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_dynamo_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_chunk_store_index_lookups_per_query_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_chunk_store_index_lookups_per_query:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_chunk_store_index_lookups_per_query_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_chunk_store_index_lookups_per_query:50quantile"
      - "expr": "sum(rate(cortex_chunk_store_index_lookups_per_query_sum[1m])) by (cluster, job) / sum(rate(cortex_chunk_store_index_lookups_per_query_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_index_lookups_per_query:avg"
      - "expr": "sum(rate(cortex_chunk_store_index_lookups_per_query_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_chunk_store_index_lookups_per_query_bucket:sum_rate"
      - "expr": "sum(rate(cortex_chunk_store_index_lookups_per_query_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_index_lookups_per_query_sum:sum_rate"
      - "expr": "sum(rate(cortex_chunk_store_index_lookups_per_query_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_index_lookups_per_query_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_chunk_store_series_pre_intersection_per_query_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_chunk_store_series_pre_intersection_per_query:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_chunk_store_series_pre_intersection_per_query_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_chunk_store_series_pre_intersection_per_query:50quantile"
      - "expr": "sum(rate(cortex_chunk_store_series_pre_intersection_per_query_sum[1m])) by (cluster, job) / sum(rate(cortex_chunk_store_series_pre_intersection_per_query_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_series_pre_intersection_per_query:avg"
      - "expr": "sum(rate(cortex_chunk_store_series_pre_intersection_per_query_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_chunk_store_series_pre_intersection_per_query_bucket:sum_rate"
      - "expr": "sum(rate(cortex_chunk_store_series_pre_intersection_per_query_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_series_pre_intersection_per_query_sum:sum_rate"
      - "expr": "sum(rate(cortex_chunk_store_series_pre_intersection_per_query_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_series_pre_intersection_per_query_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_chunk_store_series_post_intersection_per_query_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_chunk_store_series_post_intersection_per_query:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_chunk_store_series_post_intersection_per_query_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_chunk_store_series_post_intersection_per_query:50quantile"
      - "expr": "sum(rate(cortex_chunk_store_series_post_intersection_per_query_sum[1m])) by (cluster, job) / sum(rate(cortex_chunk_store_series_post_intersection_per_query_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_series_post_intersection_per_query:avg"
      - "expr": "sum(rate(cortex_chunk_store_series_post_intersection_per_query_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_chunk_store_series_post_intersection_per_query_bucket:sum_rate"
      - "expr": "sum(rate(cortex_chunk_store_series_post_intersection_per_query_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_series_post_intersection_per_query_sum:sum_rate"
      - "expr": "sum(rate(cortex_chunk_store_series_post_intersection_per_query_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_series_post_intersection_per_query_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_chunk_store_chunks_per_query_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_chunk_store_chunks_per_query:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_chunk_store_chunks_per_query_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_chunk_store_chunks_per_query:50quantile"
      - "expr": "sum(rate(cortex_chunk_store_chunks_per_query_sum[1m])) by (cluster, job) / sum(rate(cortex_chunk_store_chunks_per_query_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_chunks_per_query:avg"
      - "expr": "sum(rate(cortex_chunk_store_chunks_per_query_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_chunk_store_chunks_per_query_bucket:sum_rate"
      - "expr": "sum(rate(cortex_chunk_store_chunks_per_query_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_chunks_per_query_sum:sum_rate"
      - "expr": "sum(rate(cortex_chunk_store_chunks_per_query_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_chunk_store_chunks_per_query_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_database_request_duration_seconds_bucket[1m])) by (le, cluster, job, method))"
        "record": "cluster_job_method:cortex_database_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_database_request_duration_seconds_bucket[1m])) by (le, cluster, job, method))"
        "record": "cluster_job_method:cortex_database_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_database_request_duration_seconds_sum[1m])) by (cluster, job, method) / sum(rate(cortex_database_request_duration_seconds_count[1m])) by (cluster, job, method)"
        "record": "cluster_job_method:cortex_database_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_database_request_duration_seconds_bucket[1m])) by (le, cluster, job, method)"
        "record": "cluster_job_method:cortex_database_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_database_request_duration_seconds_sum[1m])) by (cluster, job, method)"
        "record": "cluster_job_method:cortex_database_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_database_request_duration_seconds_count[1m])) by (cluster, job, method)"
        "record": "cluster_job_method:cortex_database_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_gcs_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation))"
        "record": "cluster_job_operation:cortex_gcs_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_gcs_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation))"
        "record": "cluster_job_operation:cortex_gcs_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_gcs_request_duration_seconds_sum[1m])) by (cluster, job, operation) / sum(rate(cortex_gcs_request_duration_seconds_count[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_gcs_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_gcs_request_duration_seconds_bucket[1m])) by (le, cluster, job, operation)"
        "record": "cluster_job_operation:cortex_gcs_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_gcs_request_duration_seconds_sum[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_gcs_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_gcs_request_duration_seconds_count[1m])) by (cluster, job, operation)"
        "record": "cluster_job_operation:cortex_gcs_request_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_kv_request_duration_seconds_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_kv_request_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_kv_request_duration_seconds_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_kv_request_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_kv_request_duration_seconds_sum[1m])) by (cluster, job) / sum(rate(cortex_kv_request_duration_seconds_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_kv_request_duration_seconds:avg"
      - "expr": "sum(rate(cortex_kv_request_duration_seconds_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_kv_request_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_kv_request_duration_seconds_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_kv_request_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_kv_request_duration_seconds_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_kv_request_duration_seconds_count:sum_rate"
    - "name": "cortex_queries"
      "rules":
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_query_frontend_retries_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_query_frontend_retries:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_query_frontend_retries_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_query_frontend_retries:50quantile"
      - "expr": "sum(rate(cortex_query_frontend_retries_sum[1m])) by (cluster, job) / sum(rate(cortex_query_frontend_retries_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_query_frontend_retries:avg"
      - "expr": "sum(rate(cortex_query_frontend_retries_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_query_frontend_retries_bucket:sum_rate"
      - "expr": "sum(rate(cortex_query_frontend_retries_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_query_frontend_retries_sum:sum_rate"
      - "expr": "sum(rate(cortex_query_frontend_retries_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_query_frontend_retries_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_query_frontend_queue_duration_seconds_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_query_frontend_queue_duration_seconds:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_query_frontend_queue_duration_seconds_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_query_frontend_queue_duration_seconds:50quantile"
      - "expr": "sum(rate(cortex_query_frontend_queue_duration_seconds_sum[1m])) by (cluster, job) / sum(rate(cortex_query_frontend_queue_duration_seconds_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_query_frontend_queue_duration_seconds:avg"
      - "expr": "sum(rate(cortex_query_frontend_queue_duration_seconds_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_query_frontend_queue_duration_seconds_bucket:sum_rate"
      - "expr": "sum(rate(cortex_query_frontend_queue_duration_seconds_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_query_frontend_queue_duration_seconds_sum:sum_rate"
      - "expr": "sum(rate(cortex_query_frontend_queue_duration_seconds_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_query_frontend_queue_duration_seconds_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_ingester_queried_series_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_ingester_queried_series:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_ingester_queried_series_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_ingester_queried_series:50quantile"
      - "expr": "sum(rate(cortex_ingester_queried_series_sum[1m])) by (cluster, job) / sum(rate(cortex_ingester_queried_series_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_series:avg"
      - "expr": "sum(rate(cortex_ingester_queried_series_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_series_bucket:sum_rate"
      - "expr": "sum(rate(cortex_ingester_queried_series_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_series_sum:sum_rate"
      - "expr": "sum(rate(cortex_ingester_queried_series_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_series_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_ingester_queried_chunks_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_ingester_queried_chunks:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_ingester_queried_chunks_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_ingester_queried_chunks:50quantile"
      - "expr": "sum(rate(cortex_ingester_queried_chunks_sum[1m])) by (cluster, job) / sum(rate(cortex_ingester_queried_chunks_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_chunks:avg"
      - "expr": "sum(rate(cortex_ingester_queried_chunks_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_chunks_bucket:sum_rate"
      - "expr": "sum(rate(cortex_ingester_queried_chunks_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_chunks_sum:sum_rate"
      - "expr": "sum(rate(cortex_ingester_queried_chunks_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_chunks_count:sum_rate"
      - "expr": "histogram_quantile(0.99, sum(rate(cortex_ingester_queried_samples_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_ingester_queried_samples:99quantile"
      - "expr": "histogram_quantile(0.50, sum(rate(cortex_ingester_queried_samples_bucket[1m])) by (le, cluster, job))"
        "record": "cluster_job:cortex_ingester_queried_samples:50quantile"
      - "expr": "sum(rate(cortex_ingester_queried_samples_sum[1m])) by (cluster, job) / sum(rate(cortex_ingester_queried_samples_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_samples:avg"
      - "expr": "sum(rate(cortex_ingester_queried_samples_bucket[1m])) by (le, cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_samples_bucket:sum_rate"
      - "expr": "sum(rate(cortex_ingester_queried_samples_sum[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_samples_sum:sum_rate"
      - "expr": "sum(rate(cortex_ingester_queried_samples_count[1m])) by (cluster, job)"
        "record": "cluster_job:cortex_ingester_queried_samples_count:sum_rate"
    - "name": "cortex_received_samples"
      "rules":
      - "expr": |
          sum by (cluster, namespace, job) (rate(cortex_distributor_received_samples_total[5m]))
        "record": "cluster_namespace_job:cortex_distributor_received_samples:rate5m"
kind: ConfigMap
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: cortex-rules-cm-797t8kbfmt
  namespace: cortex-k8s
---
apiVersion: v1
data:
  nginx.conf: |-
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
      worker_connections  4096;  ## Default: 1024
    }

    http {
      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
      access_log   /dev/stderr  main;
      sendfile     on;
      tcp_nopush   on;
      resolver kube-dns.kube-system.svc.cluster.local;

      server { # simple reverse-proxy
        listen 80;
        proxy_set_header X-Scope-OrgID 0;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;

        location = /healthz {
          return 200 'alive';
        }

        # Distributor Config
        location = /ring {
          proxy_pass      http://distributor.cortex-k8s.svc.cluster.local$request_uri;
        }

        location = /all_user_stats {
          proxy_pass      http://distributor.cortex-k8s.svc.cluster.local$request_uri;
        }

        location = /api/prom/push {
          proxy_pass      http://distributor.cortex-k8s.svc.cluster.local$request_uri;
        }

        # Query Config
        location ~ /api/prom/.* {
          proxy_pass      http://query-frontend.cortex-k8s.svc.cluster.local$request_uri;
        }

        # Alertmanager Config
        location ~ /api/prom/alertmanager/.* {
          proxy_pass      http://alertmanager.cortex-k8s.svc.cluster.local$request_uri;
        }

        location ~ /api/v1/alerts {
          proxy_pass      http://alertmanager.cortex-k8s.svc.cluster.local$request_uri;
        }

        location ~ /multitenant_alertmanager/status {
          proxy_pass      http://alertmanager.cortex-k8s.svc.cluster.local$request_uri;
        }

        # Ruler Config
        location ~ /api/v1/rules {
          proxy_pass      http://ruler.cortex-k8s.svc.cluster.local$request_uri;
        }

        location ~ /ruler/ring {
          proxy_pass      http://ruler.cortex-k8s.svc.cluster.local$request_uri;
        }

        # Config Config
        location ~ /api/prom/configs/.* {
          proxy_pass      http://configs.cortex-k8s.svc.cluster.local$request_uri;
        }
      }
    }
kind: ConfigMap
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: nginx
  namespace: cortex-k8s
---
apiVersion: v1
data:
  prometheus.yml: |-
    global:
      scrape_interval: 10s # By default, scrape targets every 15 seconds.
      external_labels:
        cluster: cortex-retrieval
        prometheus_replica: replica1

    remote_write:
      - url: http://nginx.cortex-k8s.svc.cluster.local:80/api/prom/push

    scrape_configs:
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
        - role: pod

      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      # You can specify the following annotations (on pods):
      #   prometheus.io.scrape: false - don't scrape this pod
      #   prometheus.io.scheme: https - use https for scraping
      #   prometheus.io.port - scrape this port
      #   prometheus.io.path - scrape this path
      relabel_configs:

      # Always use HTTPS for the api server
      - source_labels: [__meta_kubernetes_service_label_component]
        regex: apiserver
        action: replace
        target_label: __scheme__
        replacement: https

      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
        replacement: $1

      # Drop anything annotated with prometheus.io.scrape=false
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: drop
        regex: false

      # Drop any endpoint who's pod port name ends with -noscrape
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: drop
        regex: .*-noscrape

      # Allow pods to override the scrape scheme with prometheus.io.scheme=https
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: ^(https?)$
        replacement: $1

      # Allow service to override the scrape path with prometheus.io.path=/other_metrics_path
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: ^(.+)$
        replacement: $1

      # Allow services to override the scrape port with prometheus.io.port=1234
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+?)(\:\d+)?;(\d+)
        replacement: $1:$3

      # Drop pods without a name label
      - source_labels: [__meta_kubernetes_pod_label_name]
        action: drop
        regex: ^$

      # Rename jobs to be <namespace>/<name, from pod name label>
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_label_name]
        action: replace
        separator: /
        target_label: job
        replacement: $1

      # Rename instances to be the pod name
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: instance

      # Include node name as a extra field
      - source_labels: [__meta_kubernetes_pod_node_name]
        target_label: node

    # This scrape config gather all nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
        - role: node

      # couldn't get prometheus to validate the kublet cert for scraping, so don't bother for now
      tls_config:
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      relabel_configs:
      - target_label: __scheme__
        replacement: https
      - source_labels: [__meta_kubernetes_node_label_kubernetes_io_hostname]
        target_label: instance

    # This scrape config just pulls in the default/kubernetes service
    - job_name: 'kubernetes-service'
      kubernetes_sd_configs:
        - role: endpoints

      tls_config:
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_component]
        regex: apiserver
        action: keep

      - target_label: __scheme__
        replacement: https

      - source_labels: []
        target_label: job
        replacement: default/kubernetes
kind: ConfigMap
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: retrieval-config
  namespace: cortex-k8s
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: alertmanager
  namespace: cortex-k8s
spec:
  ports:
  - name: http-metrics
    port: 80
    targetPort: 80
  selector:
    name: alertmanager
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: consul
  namespace: cortex-k8s
spec:
  ports:
  - name: http
    port: 8500
  selector:
    name: consul
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: distributor
  namespace: cortex-k8s
spec:
  ports:
  - name: http-metrics
    port: 80
    targetPort: 80
  - name: grpc-distribut
    port: 9095
    targetPort: 9095
  selector:
    name: distributor
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: ingester
  namespace: cortex-k8s
spec:
  ports:
  - name: http-metrics
    port: 80
    targetPort: 80
  - name: grpc-ingester
    port: 9095
    targetPort: 9095
  selector:
    name: ingester
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "14271"
  labels:
    app: jaeger-agent
    team: team-infra
  name: jaeger-agent-svc
  namespace: cortex-k8s
spec:
  ports:
  - name: http-metrics
    port: 14271
    protocol: TCP
  - name: http-config
    port: 5778
    protocol: TCP
  - name: udp-compact
    port: 6831
    protocol: UDP
  - name: udp-binary
    port: 6832
    protocol: UDP
  - name: udp-zk-compact
    port: 5775
    protocol: UDP
  selector:
    app: jaeger-agent
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: memcached
  namespace: cortex-k8s
spec:
  clusterIP: None
  ports:
  - name: memcached
    port: 11211
  - name: prom
    port: 9150
  selector:
    name: memcached
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: nginx
  namespace: cortex-k8s
spec:
  ports:
  - name: http
    nodePort: 30080
    port: 80
  selector:
    name: nginx
    team: team-infra
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: querier
  namespace: cortex-k8s
spec:
  ports:
  - name: http-metrics
    port: 80
    targetPort: 80
  - name: grpc-querier
    port: 9095
    targetPort: 9095
  selector:
    name: querier
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: query-frontend
  namespace: cortex-k8s
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 80
  - name: grpc-frontend
    port: 9095
  selector:
    name: query-frontend
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: retrieval
  namespace: cortex-k8s
spec:
  ports:
  - name: http-metrics
    nodePort: 30090
    port: 9090
    targetPort: 9090
  selector:
    name: retrieval
    team: team-infra
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: ruler
  namespace: cortex-k8s
spec:
  ports:
  - name: http-metrics
    port: 80
    targetPort: 80
  selector:
    name: ruler
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: s3
  namespace: cortex-k8s
spec:
  ports:
  - name: http-metrics
    nodePort: 31900
    port: 9000
    targetPort: 9000
  selector:
    name: s3
    team: team-infra
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: store-gateway
  namespace: cortex-k8s
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 80
  - name: grpc-store-gw
    port: 9095
  selector:
    name: store-gateway
    team: team-infra
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: cortex-s3
  namespace: cortex-k8s
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 30Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: alertmanager
  namespace: cortex-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
      name: alertmanager
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
      labels:
        name: alertmanager
        team: team-infra
    spec:
      containers:
      - args:
        - -alertmanager.web.external-url=/api/prom/alertmanager
        - -alertmanager.storage.type=s3
        - -alertmanager.storage.s3.url=s3://cortex:supersecret@s3.cortex-k8s.svc.cluster.local:9000/cortex
        - -alertmanager.storage.s3.force-path-style=true
        - -experimental.alertmanager.enable-api=true
        - -log.level=info
        - -server.http-listen-port=80
        - -store.engine=blocks
        - -target=alertmanager
        env:
        - name: JAEGER_AGENT_HOST
          value: jaeger-agent-svc
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_TAGS
          value: app=alertmanager
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        image: uhub.service.ucloud.cn/bluecity/cortex:v1.5.0
        imagePullPolicy: IfNotPresent
        name: alertmanager
        ports:
        - containerPort: 80
          name: http-metrics
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 15
          timeoutSeconds: 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: consul
  namespace: cortex-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
      name: consul
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
      labels:
        name: consul
        team: team-infra
    spec:
      containers:
      - args:
        - agent
        - -ui
        - -server
        - -client=0.0.0.0
        - -bootstrap
        env:
        - name: CHECKPOINT_DISABLE
          value: "1"
        image: uhub.service.ucloud.cn/bluecity/consul:1.5.3
        imagePullPolicy: IfNotPresent
        name: consul
        ports:
        - containerPort: 8300
          name: server-noscrape
        - containerPort: 8301
          name: serf-noscrape
        - containerPort: 8400
          name: client-noscrape
        - containerPort: 8500
          name: http-noscrape
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: distributor
  namespace: cortex-k8s
spec:
  replicas: 2
  selector:
    matchLabels:
      name: distributor
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        name: distributor
        team: team-infra
    spec:
      containers:
      - args:
        - -consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -distributor.ha-tracker.enable=true
        - -distributor.ha-tracker.replica=prometheus_replica
        - -distributor.ha-tracker.enable-for-all-users=true
        - -distributor.ha-tracker.store=consul
        - -distributor.ha-tracker.consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -distributor.health-check-ingesters=true
        - -distributor.ingestion-burst-size=200000
        - -distributor.ingestion-rate-limit=10000
        - -distributor.ingestion-rate-limit-strategy=global
        - -distributor.remote-timeout=20s
        - -distributor.ring.consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -distributor.shard-by-all-labels=true
        - -server.grpc.keepalive.max-connection-age=2m
        - -server.grpc.keepalive.max-connection-age-grace=5m
        - -server.grpc.keepalive.max-connection-idle=1m
        - -store.engine=blocks
        - -target=distributor
        - -validation.reject-old-samples=true
        - -validation.reject-old-samples.max-age=12h
        env:
        - name: JAEGER_AGENT_HOST
          value: jaeger-agent-svc
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_TAGS
          value: app=distributor
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        image: uhub.service.ucloud.cn/bluecity/cortex:v1.5.0
        imagePullPolicy: IfNotPresent
        name: distributor
        ports:
        - containerPort: 80
          name: http-metrics
        - containerPort: 9095
          name: grpc-distribut
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          timeoutSeconds: 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: jaeger-agent
  namespace: cortex-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger-agent
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
        sidecar.istio.io/inject: "false"
      labels:
        app: jaeger-agent
        team: team-infra
    spec:
      containers:
      - args:
        - --reporter.grpc.host-port=stack-monitoring-apm-http.im-eck:14250
        - --agent.tags=authorization=Bearer DT0J577br5PZY60g74IX4xfI
        image: uhub.service.ucloud.cn/bluecity/jaeger-agent:1.20.0
        imagePullPolicy: IfNotPresent
        name: jaeger-agent
        ports:
        - containerPort: 14271
          name: http-metrics
          protocol: TCP
        - containerPort: 6831
          name: udp-compact
          protocol: UDP
        - containerPort: 6832
          name: udp-binary
          protocol: UDP
        - containerPort: 5778
          name: http-config
          protocol: TCP
        - containerPort: 5775
          name: udp-zk-compact
          protocol: UDP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: memcached
  namespace: cortex-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
      name: memcached
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
        prometheus.io.scrape: "false"
      labels:
        name: memcached
        team: team-infra
    spec:
      containers:
      - args:
        - -m 64
        - -p 11211
        image: memcached:1.6.7
        imagePullPolicy: IfNotPresent
        name: memcached
        ports:
        - containerPort: 11211
          name: clients
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: nginx
  namespace: cortex-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
      name: nginx
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
        prometheus.io.scrape: "false"
      labels:
        name: nginx
        team: team-infra
    spec:
      containers:
      - image: nginx
        imagePullPolicy: IfNotPresent
        name: nginx
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - mountPath: /etc/nginx
          name: config-volume
      volumes:
      - configMap:
          name: nginx
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: querier
  namespace: cortex-k8s
spec:
  replicas: 3
  selector:
    matchLabels:
      name: querier
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        name: querier
        team: team-infra
    spec:
      containers:
      - args:
        - -blocks-storage.bucket-store.metadata-cache.backend=memcached
        - -blocks-storage.bucket-store.metadata-cache.memcached.addresses=memcached.cortex-k8s.svc.cluster.local:11211
        - -blocks-storage.bucket-store.ignore-deletion-marks-delay=1h
        - -blocks-storage.bucket-store.sync-dir=/data/tsdb
        - -blocks-storage.backend=s3
        - -blocks-storage.s3.bucket-name=cortex
        - -blocks-storage.s3.access-key-id=cortex
        - -blocks-storage.s3.secret-access-key=supersecret
        - -blocks-storage.s3.endpoint=s3.cortex-k8s.svc.cluster.local:9000
        - -blocks-storage.s3.insecure=true
        - -blocks-storage.tsdb.block-ranges-period=2h
        - -blocks-storage.tsdb.dir=/data/tsdb
        - -blocks-storage.tsdb.retention-period=96h
        - -blocks-storage.tsdb.ship-interval=1m
        - -consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -distributor.health-check-ingesters=true
        - -distributor.shard-by-all-labels=true
        - -log.level=info
        - -querier.frontend-address=query-frontend.cortex-k8s.svc.cluster.local:9095
        - -querier.frontend-client.grpc-max-send-msg-size=104857600
        - -querier.max-concurrent=8
        - -querier.query-store-after=12h
        - -querier.query-ingesters-within=13h
        - -querier.worker-parallelism=4
        - -querier.batch-iterators=true
        - -querier.ingester-streaming=true
        - -s3.url=s3://cortex:supersecret@s3.cortex-k8s.svc.cluster.local:9000/cortex
        - -s3.force-path-style=true
        - -server.http-listen-port=80
        - -server.http-write-timeout=1m
        - -store-gateway.sharding-enabled=true
        - -store-gateway.sharding-strategy=shuffle-sharding
        - -store-gateway.tenant-shard-size=1
        - -store-gateway.sharding-ring.prefix=
        - -store-gateway.sharding-ring.store=consul
        - -store-gateway.sharding-ring.consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -store.cardinality-limit=1000000
        - -store.engine=blocks
        - -store.max-query-length=768h
        - -target=querier
        env:
        - name: JAEGER_AGENT_HOST
          value: jaeger-agent-svc
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_TAGS
          value: app=querier
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        image: uhub.service.ucloud.cn/bluecity/cortex:v1.5.0
        imagePullPolicy: IfNotPresent
        name: querier
        ports:
        - containerPort: 80
          name: http-metrics
        - containerPort: 9095
          name: grpc-querier
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 15
          timeoutSeconds: 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: query-frontend
  namespace: cortex-k8s
spec:
  replicas: 2
  selector:
    matchLabels:
      name: query-frontend
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        name: query-frontend
        team: team-infra
    spec:
      containers:
      - args:
        - -target=query-frontend
        - -log.level=warn
        - -frontend.max-queriers-per-tenant=1
        - -store.engine=blocks
        - -server.http-listen-port=80
        - -server.grpc-listen-port=9095
        env:
        - name: JAEGER_AGENT_HOST
          value: jaeger-agent-svc
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_TAGS
          value: app=query-frontend
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        image: uhub.service.ucloud.cn/bluecity/cortex:v1.5.0
        imagePullPolicy: IfNotPresent
        name: query-frontend
        ports:
        - containerPort: 80
          name: http-metrics
        - containerPort: 9095
          name: grpc-frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: retrieval
  namespace: cortex-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
      name: retrieval
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
      labels:
        name: retrieval
        team: team-infra
    spec:
      containers:
      - args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.retention.time=6h
        - --storage.tsdb.retention.size=2GB
        env:
        - name: JAEGER_DISABLED
          value: "false"
        - name: JAEGER_AGENT_HOST
          value: jaeger-agent-svc
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_TAGS
          value: app=prometheus
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        image: uhub.service.ucloud.cn/bluecity/prometheus:v2.22.2
        imagePullPolicy: IfNotPresent
        name: retrieval
        ports:
        - containerPort: 9090
          name: http-metrics
        volumeMounts:
        - mountPath: /etc/prometheus
          name: config-volume
      serviceAccountName: retrieval
      volumes:
      - configMap:
          name: retrieval-config
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: ruler
  namespace: cortex-k8s
spec:
  replicas: 2
  selector:
    matchLabels:
      name: ruler
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
      labels:
        name: ruler
        team: team-infra
    spec:
      containers:
      - args:
        - -blocks-storage.bucket-store.metadata-cache.backend=memcached
        - -blocks-storage.bucket-store.metadata-cache.memcached.addresses=memcached.cortex-k8s.svc.cluster.local:11211
        - -blocks-storage.backend=s3
        - -blocks-storage.s3.bucket-name=cortex
        - -blocks-storage.s3.access-key-id=cortex
        - -blocks-storage.s3.secret-access-key=supersecret
        - -blocks-storage.s3.endpoint=s3.cortex-k8s.svc.cluster.local:9000
        - -blocks-storage.s3.insecure=true
        - -consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -log.level=info
        - -querier.batch-iterators=true
        - -querier.ingester-streaming=true
        - -ruler.enable-sharding=true
        - -ruler.ring.consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -ruler.alertmanager-url=http://alertmanager.cortex-k8s.svc.cluster.local/api/prom/alertmanager/
        - -ruler.alertmanager-use-v2=true
        - -ruler.storage.type=s3
        - -ruler.storage.s3.url=s3://cortex:supersecret@s3.cortex-k8s.svc.cluster.local:9000/cortex
        - -ruler.storage.s3.force-path-style=true
        - -ruler.storage.s3.insecure=true
        - -experimental.ruler.enable-api=true
        - -server.http-listen-port=80
        - -store.engine=blocks
        - -store-gateway.sharding-enabled=true
        - -store-gateway.sharding-strategy=shuffle-sharding
        - -store-gateway.tenant-shard-size=1
        - -store-gateway.sharding-ring.prefix=
        - -store-gateway.sharding-ring.store=consul
        - -store-gateway.sharding-ring.consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -target=ruler
        env:
        - name: JAEGER_AGENT_HOST
          value: jaeger-agent-svc
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_TAGS
          value: app=ruler
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        image: uhub.service.ucloud.cn/bluecity/cortex:v1.5.0
        imagePullPolicy: IfNotPresent
        name: ruler
        ports:
        - containerPort: 80
          name: http-metrics
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    team: team-infra
  name: s3
  namespace: cortex-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
      name: s3
      team: team-infra
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
        prometheus.io.scheme: http
        prometheus.io.scrape: "true"
        prometheus.io/path: /minio/prometheus/metrics
        prometheus.io/port: "9000"
      labels:
        name: s3
        team: team-infra
    spec:
      containers:
      - command:
        - sh
        - -c
        - mkdir /storage/cortex && minio server /storage
        env:
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: public
        - name: MINIO_ACCESS_KEY
          value: cortex
        - name: MINIO_SECRET_KEY
          value: supersecret
        image: minio/minio:RELEASE.2020-11-19T23-48-16Z
        imagePullPolicy: IfNotPresent
        name: minio
        ports:
        - containerPort: 9000
          name: http-metrics
        volumeMounts:
        - mountPath: /storage
          name: storage
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: cortex-s3
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    name: compactor
    team: team-infra
  name: compactor
  namespace: cortex-k8s
spec:
  replicas: 2
  selector:
    matchLabels:
      name: compactor
      team: team-infra
  serviceName: compactor
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        name: compactor
        team: team-infra
    spec:
      containers:
      - args:
        - -blocks-storage.backend=s3
        - -blocks-storage.bucket-store.ignore-deletion-marks-delay=1h
        - -blocks-storage.bucket-store.sync-dir=/data/tsdb
        - -blocks-storage.s3.bucket-name=cortex
        - -blocks-storage.s3.access-key-id=cortex
        - -blocks-storage.s3.secret-access-key=supersecret
        - -blocks-storage.s3.endpoint=s3.cortex-k8s.svc.cluster.local:9000
        - -blocks-storage.s3.insecure=true
        - -blocks-storage.tsdb.block-ranges-period=2h
        - -blocks-storage.tsdb.dir=/data/tsdb
        - -blocks-storage.tsdb.retention-period=96h
        - -blocks-storage.tsdb.ship-interval=1m
        - -consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -compactor.sharding-enabled=true
        - -compactor.ring.consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -log.level=info
        - -server.grpc-max-concurrent-streams=100000
        - -store.engine=blocks
        - -target=compactor
        env:
        - name: JAEGER_AGENT_HOST
          value: jaeger-agent-svc
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_TAGS
          value: app=compactor
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        image: uhub.service.ucloud.cn/bluecity/cortex:v1.5.0
        imagePullPolicy: IfNotPresent
        name: compactor
        ports:
        - containerPort: 80
          name: http-metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
        volumeMounts:
        - mountPath: /data
          name: compactor-pvc
      volumes:
      - name: compactor-pvc
        persistentVolumeClaim:
          claimName: compactor-pvc
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        team: team-infra
      name: compactor-pvc
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    name: ingester
    team: team-infra
  name: ingester
  namespace: cortex-k8s
spec:
  replicas: 3
  selector:
    matchLabels:
      name: ingester
      team: team-infra
  serviceName: ingester
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        name: ingester
        team: team-infra
    spec:
      containers:
      - args:
        - -blocks-storage.backend=s3
        - -blocks-storage.bucket-store.ignore-deletion-marks-delay=1h
        - -blocks-storage.bucket-store.sync-dir=/data/tsdb
        - -blocks-storage.s3.bucket-name=cortex
        - -blocks-storage.s3.access-key-id=cortex
        - -blocks-storage.s3.secret-access-key=supersecret
        - -blocks-storage.s3.endpoint=s3.cortex-k8s.svc.cluster.local:9000
        - -blocks-storage.s3.insecure=true
        - -blocks-storage.tsdb.block-ranges-period=2h
        - -blocks-storage.tsdb.dir=/data/tsdb
        - -blocks-storage.tsdb.retention-period=96h
        - -blocks-storage.tsdb.ship-interval=1m
        - -consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -distributor.health-check-ingesters=true
        - -distributor.shard-by-all-labels=true
        - -distributor.sharding-strategy=shuffle-sharding
        - -distributor.ingestion-tenant-shard-size=3
        - -ingester.checkpoint-duration=15m
        - -ingester.checkpoint-enabled=true
        - -ingester.chunk-encoding=3
        - -ingester.heartbeat-period=15s
        - -ingester.join-after=0s
        - -ingester.max-chunk-age=6h
        - -ingester.max-chunk-idle=15m
        - -ingester.max-global-series-per-metric=30000
        - -ingester.max-global-series-per-user=150000
        - -ingester.max-samples-per-query=1000000
        - -ingester.max-series-per-metric=0
        - -ingester.max-series-per-query=100000
        - -ingester.max-series-per-user=0
        - -ingester.max-stale-chunk-idle=5m
        - -ingester.max-transfer-retries=60
        - -ingester.num-tokens=512
        - -ingester.recover-from-wal=true
        - -ingester.retain-period=15m
        - -ingester.tokens-file-path=/wal_data/tokens
        - -ingester.wal-dir=/wal_data
        - -ingester.wal-enabled=true
        - -log.level=info
        - -s3.url=s3://cortex:supersecret@s3.cortex-k8s.svc.cluster.local:9000/cortex
        - -s3.force-path-style=true
        - -server.grpc-max-concurrent-streams=100000
        - -store.engine=blocks
        - -target=ingester
        env:
        - name: JAEGER_AGENT_HOST
          value: jaeger-agent-svc
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_TAGS
          value: app=ingester
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        image: uhub.service.ucloud.cn/bluecity/cortex:v1.5.0
        imagePullPolicy: IfNotPresent
        name: ingester
        ports:
        - containerPort: 80
          name: http-metrics
        - containerPort: 9095
          name: grpc-ingester
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 15
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /wal_data
          name: ingester-pvc
      terminationGracePeriodSeconds: 30
      volumes:
      - name: ingester-pvc
        persistentVolumeClaim:
          claimName: ingester-pvc
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        team: team-infra
      name: ingester-pvc
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    co.elastic.logs/enabled: "true"
  labels:
    name: store-gateway
    team: team-infra
  name: store-gateway
  namespace: cortex-k8s
spec:
  replicas: 3
  selector:
    matchLabels:
      name: store-gateway
      team: team-infra
  serviceName: store-gateway
  template:
    metadata:
      annotations:
        co.elastic.logs/enabled: "true"
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        name: store-gateway
        team: team-infra
    spec:
      containers:
      - args:
        - -blocks-storage.bucket-store.metadata-cache.backend=memcached
        - -blocks-storage.bucket-store.metadata-cache.memcached.addresses=memcached.cortex-k8s.svc.cluster.local:11211
        - -blocks-storage.bucket-store.index-cache.backend=memcached
        - -blocks-storage.bucket-store.index-cache.memcached.addresses=memcached.cortex-k8s.svc.cluster.local:11211
        - -blocks-storage.bucket-store.chunks-cache.backend=memcached
        - -blocks-storage.bucket-store.chunks-cache.memcached.addresses=memcached.cortex-k8s.svc.cluster.local:11211
        - -blocks-storage.bucket-store.ignore-deletion-marks-delay=1h
        - -blocks-storage.bucket-store.sync-dir=/data/tsdb
        - -blocks-storage.backend=s3
        - -blocks-storage.s3.bucket-name=cortex
        - -blocks-storage.s3.access-key-id=cortex
        - -blocks-storage.s3.secret-access-key=supersecret
        - -blocks-storage.s3.endpoint=s3.cortex-k8s.svc.cluster.local:9000
        - -blocks-storage.s3.insecure=true
        - -blocks-storage.tsdb.block-ranges-period=2h
        - -blocks-storage.tsdb.dir=/data/tsdb
        - -blocks-storage.tsdb.retention-period=96h
        - -blocks-storage.tsdb.ship-interval=1m
        - -consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -log.level=warn
        - -s3.url=s3://cortex:supersecret@s3.cortex-k8s.svc.cluster.local:9000/cortex
        - -s3.force-path-style=true
        - -server.grpc-max-concurrent-streams=100000
        - -store-gateway.sharding-enabled=true
        - -store-gateway.sharding-strategy=shuffle-sharding
        - -store-gateway.tenant-shard-size=1
        - -store-gateway.sharding-ring.consul.hostname=consul.cortex-k8s.svc.cluster.local:8500
        - -store-gateway.sharding-ring.prefix=
        - -store-gateway.sharding-ring.store=consul
        - -store.engine=blocks
        - -target=store-gateway
        env:
        - name: JAEGER_AGENT_HOST
          value: jaeger-agent-svc
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_TAGS
          value: app=store-gateway
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        image: uhub.service.ucloud.cn/bluecity/cortex:v1.5.0
        imagePullPolicy: IfNotPresent
        name: store-gateway
        ports:
        - containerPort: 80
          name: http-metrics
          protocol: TCP
        - containerPort: 9095
          name: grpc-store-gw
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
        volumeMounts:
        - mountPath: /data
          name: store-gateway
      volumes:
      - name: store-gateway
        persistentVolumeClaim:
          claimName: store-gateway
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        team: team-infra
      name: store-gateway
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
